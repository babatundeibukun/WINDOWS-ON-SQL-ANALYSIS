/*Now, modify your query from the previous quiz to include partitions. 
Still create a running total of standard_amt_usd (in the orders table) over
order time, but this time, date truncate occurred_at by year and partition by 
that same year-truncated occurred_at variable. Your final table should have 
three columns: One with the amount being added for each row, one for the 
truncated date, and a final column with the running total within each year.*/

SELECT standard_amt_usd, DATE_TRUNC('year', occurred_at) AS year,
SUM(standard_amt_usd) OVER (PARTITION BY DATE_TRUNC('year', occurred_at) ORDER BY  occurred_at) AS running_total
FROM orders




/*Select the id, account_id, and total variable from the orders table, then 
create a column called total_rank that ranks this total amount of paper ordered
(from highest to lowest) for each account using a partition. Your final table 
should have these four columns.*/
SELECT id, account_id, total , 
        RANK() OVER (PARTITION BY account_id ORDER BY total) AS  total_rank
FROM orders



/*MULTIPLE ALIASES FOR WINDOWS*/
SELECT id,
       account_id,
       DATE_TRUNC('year',occurred_at) AS year,
       DENSE_RANK() OVER main_window AS dense_rank,
       total_amt_usd,
       SUM(total_amt_usd) OVER main_window AS sum_total_amt_usd,
       COUNT(total_amt_usd) OVER main_window AS count_total_amt_usd,
       AVG(total_amt_usd) OVER main_window AS avg_total_amt_usd,
       MIN(total_amt_usd) OVER main_window AS min_total_amt_usd,
       MAX(total_amt_usd) OVER main_window AS max_total_amt_usd
FROM orders
WINDOW main_window AS  (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at))  



/*comparing row*/
SELECT occurred_at,
       total_amt_usd,
       LEAD(total_amt_usd) OVER (ORDER BY occurred_at) AS lead,
       LEAD(total_amt_usd) OVER (ORDER BY occurred_at) - total_amt_usd AS lead_difference
FROM (
SELECT occurred_at,
       SUM(total_amt_usd) AS total_amt_usd
  FROM orders 
 GROUP BY 1
) sub
